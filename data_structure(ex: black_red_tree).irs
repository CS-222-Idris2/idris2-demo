import Data.Vect
data Color = R | B
data Tree a = E | T Color (Tree a) a (Tree a)

search : Ord a => a -> Tree a -> Maybe a
search x E = Nothing
search x (T _ a y b) = case compare x y of
  LT => search x a
  EQ => Just y
  GT => search x b

balance : Color -> Tree a -> a -> Tree a -> Tree a
balance B (T R (T R a x b) y c) z d = T R (T B a x b) y (T B c z d)
balance B (T R a x (T R b y c)) z d = T R (T B a x b) y (T B c z d)
balance B a x (T R (T R b y c) z d) = T R (T B a x b) y (T B c z d)
balance B a x (T R b y (T R c z d)) = T R (T B a x b) y (T B c z d)
balance c a x b = T c a x b

blacken : Tree a -> Tree a
blacken E = E
blacken (T _ a y b) = T B a y b

ins : Ord a => a -> Tree a -> Tree a
ins x E = T R E x E
ins x (T c a y b) = case compare x y of
    LT => balance c (ins x a) y b
    EQ => T c a y b
    GT => balance c a y (ins x b)

insert : Ord a => a -> Tree a -> Tree a
insert x s = blacken (ins x s)
